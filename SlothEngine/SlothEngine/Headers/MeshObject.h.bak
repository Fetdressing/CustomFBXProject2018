#pragma once
#ifndef MESHOBJECT_H
#define MESHOBJECT_H
#endif

#include "..\Headers\Entity.h"

struct MatInfo
{
	MatInfo()
	: Emissive(0.0f, 0.0f, 0.0f, 1.0f),
	Ambient(0.1f, 0.1f, 0.1f, 1.0f),
	Diffuse(1.0f, 1.0f, 1.0f, 1.0f),
	Specular(1.0f, 1.0f, 1.0f, 1.0f),
	SpecPow(128.0f),
	UseTexture(0){}

	MatInfo(XMFLOAT4 A, XMFLOAT4 D, XMFLOAT4 S, float SP)
	{
		Emissive = XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f);
		Ambient = A;
		Diffuse = D;
		Specular = S;
		SpecPow = SP;
		UseTexture = 1;
	}

	XMFLOAT4 Emissive;
	XMFLOAT4 Ambient;
	XMFLOAT4 Diffuse;
	XMFLOAT4 Specular;
	float SpecPow;
	int UseTexture;
	float Padding[2];

};

struct MaterialProperties
{
	MatInfo Material;
};

//Mesh class that inherits from entity (Has functions from available from entity) Extra stuff

class MeshObject : public Entity{

public:
	//Transform values for the mesh
	XMFLOAT3 mayaScale; //x,y,z
	XMFLOAT3 mayaPos; //x,y,z
	XMVECTOR mayaRot; //x,y,z,w  Rotation as a quaternion
	XMMATRIX mayaMatrix; //Tranformation matrix


	//Mesh ID
	int ID;
	string nameID;
	bool isTransparent;


	//Index for wich texture to use
	int texIndex;
	int nrTextureElements;
	
	MeshObject(ID3D11Buffer *b, bool transparent, XMFLOAT3 center, bool isActive, bool isStatic) : Entity(center, isActive, isStatic){
		this->vertexBuffer = b;
		this->isTransparent = transparent;

	}

	//Default constructor and destructor
	MeshObject() {};
	~MeshObject()
	{
		//vertexBuffer->Release();
		//indexBuffer->Release();
	}
	

	ID3D11Buffer* GetVertexBuffer(){
		return vertexBuffer;
	}

	void setVertexBuffer(ID3D11Buffer* VertexBufferz){
		vertexBuffer = VertexBufferz;
	}

	/*ID3D11Buffer* GetIndexBuffer(){
		return indexBuffer;
	}*/

	void Translate(float x, float y, float z){
		pos = XMMatrixTranslation(x, y, z); //göra pos till en indentitets matris innan detta utförs
		//Bbox tranform?
		//bbox.Transform(, pos);
	}

	//Vertex buffer and index buffer
	ID3D11Buffer *vertexBuffer = nullptr;
	int faceCount;

	//TEXTURE
	ID3D11ShaderResourceView* shaderResource1= nullptr;
	ID3D11ShaderResourceView* shaderResource2 = nullptr;
	//Material Info
	MatInfo material;


protected:


};

//Material presets (Can be used to test mat buffer in CORE.CPP)
namespace MatPresets
{
	// Material Presets
	const MatInfo Emerald(
		XMFLOAT4(0.0215f, 0.1745f, 0.0215f, 1.0f),
		XMFLOAT4(0.07568f, 0.61424f, 0.07568f, 1.0f),
		XMFLOAT4(0.633f, 0.727811f, 0.633f, 1.0f),
		float(76.8f));

	const MatInfo Copper(
		XMFLOAT4(0.19125f, 0.0735f, 0.0225f, 1.0f),
		XMFLOAT4(0.7038f, 0.27048f, 0.0828f, 1.0f),
		XMFLOAT4(0.256777f, 0.137622f, 0.086014f, 1.0f),
		float(0.1f));
	const MatInfo Lambert(
		XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),
		XMFLOAT4(0.8f, 0.8f, 0.8f, 1.0f),
		XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),
		float(0.0f));

	const MatInfo BlinnBase(
		XMFLOAT4(0.0f, 0.0f, 0.0f, 1.0f),
		XMFLOAT4(0.8f, 0.8f, 0.8f, 1.0f),
		XMFLOAT4(0.8f, 0.8f, 0.8f, 1.0f),
		float(0.3f));
}